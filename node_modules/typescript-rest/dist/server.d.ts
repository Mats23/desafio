/// <reference types="express-serve-static-core" />
/// <reference types="passport" />
import * as express from 'express';
import 'multer';
import { FileLimits, HttpMethod, ServiceAuthenticator, ServiceFactory } from './server-types';
/**
 * The Http server main class.
 */
export declare class Server {
    /**
     * Create the routes for all classes decorated with our decorators
     */
    static buildServices(router: express.Router, ...types: Array<any>): void;
    /**
     * An alias for Server.loadServices()
     */
    static loadControllers(router: express.Router, patterns: string | Array<string>, baseDir?: string): void;
    /**
     * Load all services from the files that matches the patterns provided
     */
    static loadServices(router: express.Router, patterns: string | Array<string>, baseDir?: string): void;
    /**
     * Return all paths accepted by the Server
     */
    static getPaths(): Array<string>;
    /**
     * Register a custom serviceFactory. It will be used to instantiate the service Objects
     * If You plan to use a custom serviceFactory, You must ensure to call this method before any typescript-rest service declaration.
     */
    static registerServiceFactory(serviceFactory: ServiceFactory): void;
    /**
     * Register a service authenticator. It will be used to authenticate users before the service method
     * invocations occurs.
     */
    static registerAuthenticator(authenticator: ServiceAuthenticator): void;
    /**
     * Configure the Server to use [typescript-ioc](https://github.com/thiagobustamante/typescript-ioc)
     * to instantiate the service objects.
     * If You plan to use IoC, You must ensure to call this method before any typescript-rest service declaration.
     * @param es6 if true, import typescript-ioc/es6
     */
    static useIoC(es6?: boolean): void;
    /**
     * Return the set oh HTTP verbs configured for the given path
     * @param servicePath The path to search HTTP verbs
     */
    static getHttpMethods(servicePath: string): Array<HttpMethod>;
    /**
     * A string used for signing cookies. This is optional and if not specified,
     * will not parse signed cookies.
     * @param secret the secret used to sign
     */
    static setCookiesSecret(secret: string): void;
    /**
     * Specifies a function that will be used to decode a cookie's value.
     * This function can be used to decode a previously-encoded cookie value
     * into a JavaScript string.
     * The default function is the global decodeURIComponent, which will decode
     * any URL-encoded sequences into their byte representations.
     *
     * NOTE: if an error is thrown from this function, the original, non-decoded
     * cookie value will be returned as the cookie's value.
     * @param decoder The decoder function
     */
    static setCookiesDecoder(decoder: (val: string) => string): void;
    /**
     * Set where to store the uploaded files
     * @param dest Destination folder
     */
    static setFileDest(dest: string): void;
    /**
     * Set a Function to control which files are accepted to upload
     * @param filter The filter function
     */
    static setFileFilter(filter: (req: Express.Request, file: Express.Multer.File, callback: (error: Error, acceptFile: boolean) => void) => void): void;
    /**
     * Set the limits of uploaded data
     * @param limit The data limit
     */
    static setFileLimits(limit: FileLimits): void;
    /**
     * Sets converter for param values to have an ability to intercept the type that actually will be passed to service
     * @param fn The converter
     */
    static setParamConverter(fn: (paramValue: any, paramType: Function) => any): void;
    /**
     * Creates and endpoint to publish the swagger documentation.
     * @param router Express router
     * @param filePath the path to a swagger file (json or yaml)
     * @param endpoint where to publish the docs
     * @param host the hostname of the service
     * @param schemes the schemes used by the server
     */
    static swagger(router: express.Router, filePath: string, endpoint: string, host?: string, schemes?: Array<string>, swaggerUiOptions?: object): void;
}

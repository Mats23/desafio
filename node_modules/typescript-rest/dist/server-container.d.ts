/// <reference types="express-serve-static-core" />
/// <reference types="passport" />
import * as express from 'express';
import * as multer from 'multer';
import * as metadata from './metadata';
import { FileLimits, HttpMethod, ServiceAuthenticator, ServiceFactory } from './server-types';
export declare class InternalServer {
    static serverClasses: Map<string, metadata.ServiceClass>;
    static paths: Map<string, Set<HttpMethod>>;
    static pathsResolved: boolean;
    static cookiesSecret: string;
    static cookiesDecoder: (val: string) => string;
    static fileDest: string;
    static fileFilter: (req: Express.Request, file: Express.Multer.File, callback: (error: Error, acceptFile: boolean) => void) => void;
    static fileLimits: FileLimits;
    static authenticator: ServiceAuthenticator;
    static serviceFactory: ServiceFactory;
    static passportStrategy: string;
    static paramConverter: (paramValue: any, paramType: Function) => any;
    static registerServiceClass(target: Function): metadata.ServiceClass;
    static inheritParentClass(name: string): void;
    static registerServiceMethod(target: Function, methodName: string): metadata.ServiceMethod;
    static resolveAllPaths(): void;
    static getPaths(): Set<string>;
    static getHttpMethods(path: string): Set<HttpMethod>;
    private static getServiceClass;
    private static resolveLanguages;
    private static resolveAccepts;
    private static resolveProperties;
    private static resolvePath;
    router: express.Router;
    upload: multer.Instance;
    constructor(router: express.Router);
    buildServices(types?: Array<Function>): void;
    runPreprocessors(processors: Array<Function>, req: express.Request): Promise<void>;
    buildService(serviceClass: metadata.ServiceClass, serviceMethod: metadata.ServiceMethod): void;
    private validateTargetType;
    private handleNotAllowedMethods;
    private getUploader;
    private buildServiceMiddleware;
    private buildSecurityMiddlewares;
    private buildParserMiddlewares;
    private processResponseHeaders;
    private checkAcceptance;
    private createService;
    private callTargetEndPoint;
    private sendValue;
    private downloadResToPromise;
    private buildArgumentsList;
    private processParameter;
    private convertType;
}
